Based on the requirements and assumptions, here is the proposed architecture for the ReactJS website:

1. `App.js`: The entry point of the application that renders the main components.

2. `TopMenu.js`: A component that represents the top navigation menu of the website.

3. `SideBar.js`: A component that represents the sidebar of the website.

4. `ContentArea.js`: A component that represents the main content area of the website.

5. `index.js`: The main file that renders the `App` component and mounts it to the DOM.

Now, let's proceed with creating the files and adding the code for each one.

`App.js`
```jsx
import React from 'react';
import TopMenu from './TopMenu';
import SideBar from './SideBar';
import ContentArea from './ContentArea';

function App() {
  return (
    <div className="app">
      <TopMenu />
      <div className="main-content">
        <SideBar />
        <ContentArea />
      </div>
    </div>
  );
}

export default App;
```

`TopMenu.js`
```jsx
import React from 'react';

function TopMenu() {
  return (
    <nav className="top-menu">
      {/* Add your navigation links or buttons here */}
    </nav>
  );
}

export default TopMenu;
```

`SideBar.js`
```jsx
import React from 'react';

function SideBar() {
  return (
    <aside className="sidebar">
      {/* Add your sidebar content here */}
    </aside>
  );
}

export default SideBar;
```

`ContentArea.js`
```jsx
import React from 'react';

function ContentArea() {
  return (
    <main className="content-area">
      {/* Add your main content here */}
    </main>
  );
}

export default ContentArea;
```

`index.js`
```jsx
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

Please note that the above code assumes that you have already set up a ReactJS project with the necessary dependencies and build tools. You may need to install additional packages and configure your project accordingly.

Additionally, you will need to create appropriate CSS files to style the components using the gridCss and material design libraries. The CSS files should be imported into the respective components to apply the styles.

Remember to update the file names, import paths, and class names as per your project structure and naming conventions.